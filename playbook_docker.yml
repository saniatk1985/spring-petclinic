---
#- hosts: localhost
#  connection: local
#  name: Get deployment host ip
#  gather_facts: false
#  tasks:
 #     - name: Get deployment host ip
  #      shell: "aws ec2 describe-instances --filters 'Name=tag:Name,Values=Deployment' --query 'Reservations[*].Instances[*].PublicIpAddress' --output=text"
   #     register: ip_inst
    #  - name: Add deployment host ip instance to inventory
     #   add_host:
      #    hostname: "{{ ip_inst.stdout }}"
       #   groups: deployment_host
        #  ansible_ssh_private_key_file: /root/Downloads/san1.pem
         # ansible_ssh_user: ubuntu

- hosts: deploy
  become: yes
 
  tasks:
    - name: Copy service to deployment host
      template:
        src: ./my.service
        dest: /etc/systemd/system/
        owner: root
        group: root
        mode: 0644
     
    - name: Reload systemd units
      shell: systemctl daemon-reload
              
    - name: Create a network
      docker_network:
        name: my_network
    
    - name: Create db container and connect to network
      docker_container:
        name: db_test
        image: "mariadb:latest"
        networks:
          - name: my_network
        volumes:
          - /db:/var/lib/mysql
        env:
          MYSQL_USER: myuser
          MYSQL_PASSWORD: 1234
          MYSQL_DATABASE: pc
          MYSQL_ROOT_PASSWORD: passwd

    - name: Restart my service
      service:
      name: my.service
      state: restarted
    
    - name: Add a container to a network, leaving existing containers connected
      docker_network:
        name: my_network
        connected:
          - myapp
        appends: yes  
      
      

     
    
 
     
 
    - name: Wait for the application to start
      wait_for:
        timeout: 60
        host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        port: 8080

    - name: application healthcheck
      uri:
        url: "http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:8080/manage/health"
        return_content: yes
      register: health

    - name: Ð¡heck if the application is running
      debug: msg='The application is running'
      when: health.json.status == "UP"


